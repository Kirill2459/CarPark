#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CarPark")]
	public partial class CarParkDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertCars(Cars instance);
    partial void UpdateCars(Cars instance);
    partial void DeleteCars(Cars instance);
    partial void InsertOwnerCars(OwnerCars instance);
    partial void UpdateOwnerCars(OwnerCars instance);
    partial void DeleteOwnerCars(OwnerCars instance);
    partial void InsertOwners(Owners instance);
    partial void UpdateOwners(Owners instance);
    partial void DeleteOwners(Owners instance);
    #endregion
		
		public CarParkDataContext() : 
				base(global::DataAccessLayer.Properties.Settings.Default.CarParkConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CarParkDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CarParkDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CarParkDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CarParkDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Cars> Cars
		{
			get
			{
				return this.GetTable<Cars>();
			}
		}
		
		public System.Data.Linq.Table<OwnerCars> OwnerCars
		{
			get
			{
				return this.GetTable<OwnerCars>();
			}
		}
		
		public System.Data.Linq.Table<Owners> Owners
		{
			get
			{
				return this.GetTable<Owners>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cars")]
	public partial class Cars : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_car;
		
		private string _Brand;
		
		private string _Model;
		
		private System.Nullable<int> _Year;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<int> _IdOwner;
		
		private EntitySet<OwnerCars> _OwnerCars;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_carChanging(int value);
    partial void OnID_carChanged();
    partial void OnBrandChanging(string value);
    partial void OnBrandChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnYearChanging(System.Nullable<int> value);
    partial void OnYearChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnIdOwnerChanging(System.Nullable<int> value);
    partial void OnIdOwnerChanged();
    #endregion
		
		public Cars()
		{
			this._OwnerCars = new EntitySet<OwnerCars>(new Action<OwnerCars>(this.attach_OwnerCars), new Action<OwnerCars>(this.detach_OwnerCars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_car", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_car
		{
			get
			{
				return this._ID_car;
			}
			set
			{
				if ((this._ID_car != value))
				{
					this.OnID_carChanging(value);
					this.SendPropertyChanging();
					this._ID_car = value;
					this.SendPropertyChanged("ID_car");
					this.OnID_carChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brand", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Brand
		{
			get
			{
				return this._Brand;
			}
			set
			{
				if ((this._Brand != value))
				{
					this.OnBrandChanging(value);
					this.SendPropertyChanging();
					this._Brand = value;
					this.SendPropertyChanged("Brand");
					this.OnBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int")]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdOwner", DbType="Int")]
		public System.Nullable<int> IdOwner
		{
			get
			{
				return this._IdOwner;
			}
			set
			{
				if ((this._IdOwner != value))
				{
					this.OnIdOwnerChanging(value);
					this.SendPropertyChanging();
					this._IdOwner = value;
					this.SendPropertyChanged("IdOwner");
					this.OnIdOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cars_OwnerCars", Storage="_OwnerCars", ThisKey="ID_car", OtherKey="ID_car")]
		public EntitySet<OwnerCars> OwnerCars
		{
			get
			{
				return this._OwnerCars;
			}
			set
			{
				this._OwnerCars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OwnerCars(OwnerCars entity)
		{
			this.SendPropertyChanging();
			entity.Cars = this;
		}
		
		private void detach_OwnerCars(OwnerCars entity)
		{
			this.SendPropertyChanging();
			entity.Cars = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerCars")]
	public partial class OwnerCars : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ID_owner;
		
		private System.Nullable<int> _ID_car;
		
		private EntityRef<Cars> _Cars;
		
		private EntityRef<Owners> _Owners;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnID_ownerChanging(System.Nullable<int> value);
    partial void OnID_ownerChanged();
    partial void OnID_carChanging(System.Nullable<int> value);
    partial void OnID_carChanged();
    #endregion
		
		public OwnerCars()
		{
			this._Cars = default(EntityRef<Cars>);
			this._Owners = default(EntityRef<Owners>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_owner", DbType="Int")]
		public System.Nullable<int> ID_owner
		{
			get
			{
				return this._ID_owner;
			}
			set
			{
				if ((this._ID_owner != value))
				{
					if (this._Owners.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_ownerChanging(value);
					this.SendPropertyChanging();
					this._ID_owner = value;
					this.SendPropertyChanged("ID_owner");
					this.OnID_ownerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_car", DbType="Int")]
		public System.Nullable<int> ID_car
		{
			get
			{
				return this._ID_car;
			}
			set
			{
				if ((this._ID_car != value))
				{
					if (this._Cars.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_carChanging(value);
					this.SendPropertyChanging();
					this._ID_car = value;
					this.SendPropertyChanged("ID_car");
					this.OnID_carChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cars_OwnerCars", Storage="_Cars", ThisKey="ID_car", OtherKey="ID_car", IsForeignKey=true)]
		public Cars Cars
		{
			get
			{
				return this._Cars.Entity;
			}
			set
			{
				Cars previousValue = this._Cars.Entity;
				if (((previousValue != value) 
							|| (this._Cars.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cars.Entity = null;
						previousValue.OwnerCars.Remove(this);
					}
					this._Cars.Entity = value;
					if ((value != null))
					{
						value.OwnerCars.Add(this);
						this._ID_car = value.ID_car;
					}
					else
					{
						this._ID_car = default(Nullable<int>);
					}
					this.SendPropertyChanged("Cars");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owners_OwnerCars", Storage="_Owners", ThisKey="ID_owner", OtherKey="ID_owner", IsForeignKey=true)]
		public Owners Owners
		{
			get
			{
				return this._Owners.Entity;
			}
			set
			{
				Owners previousValue = this._Owners.Entity;
				if (((previousValue != value) 
							|| (this._Owners.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owners.Entity = null;
						previousValue.OwnerCars.Remove(this);
					}
					this._Owners.Entity = value;
					if ((value != null))
					{
						value.OwnerCars.Add(this);
						this._ID_owner = value.ID_owner;
					}
					else
					{
						this._ID_owner = default(Nullable<int>);
					}
					this.SendPropertyChanged("Owners");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Owners")]
	public partial class Owners : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_owner;
		
		private string _Name;
		
		private System.Nullable<int> _Year;
		
		private System.Nullable<int> _ExperienceYear;
		
		private EntitySet<OwnerCars> _OwnerCars;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_ownerChanging(int value);
    partial void OnID_ownerChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnYearChanging(System.Nullable<int> value);
    partial void OnYearChanged();
    partial void OnExperienceYearChanging(System.Nullable<int> value);
    partial void OnExperienceYearChanged();
    #endregion
		
		public Owners()
		{
			this._OwnerCars = new EntitySet<OwnerCars>(new Action<OwnerCars>(this.attach_OwnerCars), new Action<OwnerCars>(this.detach_OwnerCars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_owner", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_owner
		{
			get
			{
				return this._ID_owner;
			}
			set
			{
				if ((this._ID_owner != value))
				{
					this.OnID_ownerChanging(value);
					this.SendPropertyChanging();
					this._ID_owner = value;
					this.SendPropertyChanged("ID_owner");
					this.OnID_ownerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int")]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExperienceYear", DbType="Int")]
		public System.Nullable<int> ExperienceYear
		{
			get
			{
				return this._ExperienceYear;
			}
			set
			{
				if ((this._ExperienceYear != value))
				{
					this.OnExperienceYearChanging(value);
					this.SendPropertyChanging();
					this._ExperienceYear = value;
					this.SendPropertyChanged("ExperienceYear");
					this.OnExperienceYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owners_OwnerCars", Storage="_OwnerCars", ThisKey="ID_owner", OtherKey="ID_owner")]
		public EntitySet<OwnerCars> OwnerCars
		{
			get
			{
				return this._OwnerCars;
			}
			set
			{
				this._OwnerCars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OwnerCars(OwnerCars entity)
		{
			this.SendPropertyChanging();
			entity.Owners = this;
		}
		
		private void detach_OwnerCars(OwnerCars entity)
		{
			this.SendPropertyChanging();
			entity.Owners = null;
		}
	}
}
#pragma warning restore 1591
